@using SmartCode
@using SmartCode.Generator.Entity
@model BuildContext
@{
    var project = Model.Project;
    var schema = string.Empty;
    if (project.DataSource.Paramters.TryGetValue("DbSchema", out var s)) {
        schema = (string) s;
    }
    var buildTask = Model.Build;
    var table = Model.GetCurrentTable();
    var pkCols = table.Columns.Where(col => col.IsPrimaryKey);
    var firstPk = pkCols.FirstOrDefault();
    var normalCols = table.Columns.Where(col => !col.IsPrimaryKey);
    var namespaceName = $"{project.Module}.{buildTask.Module}.Entities";
    var assemblyName = $"{project.Module}.{buildTask.Module}";
    var newLine = Environment.NewLine;
}
@functions {
    string GetGeneratorClass(Column col) {
        if (col.LanguageType == "int") {
            return "trigger-identity";
        }
        if (col.LanguageType == "long") {
            return "trigger-identity";
        }
        return "assigned";
    }
}
<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" assembly="@assemblyName" namespace="@namespaceName">

    <class name="@($"{table.ConvertedName}Entity")" table="@table.Name" @if (!string.IsNullOrEmpty(schema)) { <text>schema="@schema"</text> }>

    @if (pkCols.Count() == 1) {
        <id name="Id" column="@firstPk.Name" type="@firstPk.LanguageType">
            <generator class="@GetGeneratorClass(firstPk)">
            </generator>
        </id>
    }
    else {
        <composite-id>
        @foreach (var col in pkCols) {
            <key-property name="@col.ConvertedName" column="@col.Name" type="@col.LanguageType" />
        }
        </composite-id>
    }

    @foreach (var col in normalCols) {
        <property name="@col.ConvertedName" column="@col.Name" type="@col.LanguageType" @if (col.LanguageType == "string") { <text>length="@col.DataLength" </text> }/>
    }
    </class>

</hibernate-mapping>
